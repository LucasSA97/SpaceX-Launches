---
import Layout from '../../layouts/Layout.astro'
// import type { GetStaticPaths } from "astro";
import { getLaunchById } from '../../services/spacex'

const { id } = Astro.params

let launch
if(id) {
    launch = await getLaunchById( {id} )
}

// export async function getStaticPaths () {
//     //Podriamos llamar a una api externa para saber cada id que debe generar

//     const launches = await getLatestLaunches()
//      return launches.map(launch => ({
//         params: { id: launch.id }
//      }))
// }

---

<Layout title={`Launch #${launch?.flight_number} ${launch?.name}`}>

    <article  class="grid grid-cols-1 mx-auto w-96 place-content-center gap-2 place-items-center px-2 mb-2">

        <img class="w-52 h-auto" src={launch?.links?.patch?.small} alt='' class="w-32" transition:name=`launch ${launch?.id} image`>
        <h2 class="text-4xl text-white font-semibold">Launch #{launch?.flight_number}</h2>
        <h3 class="font-semibold text-xl text-orange-300">{launch?.name}</h3>
        <p class="text-white text-base">Release date: {launch?.date_local}</p>
        {
        launch?.links?.youtube_id !== null && (
            <iframe
             src={`https://www.youtube.com/embed/${launch?.links?.youtube_id}`}
              title="YouTube video player"
               allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
               width="800"
               height="450">
               </iframe>
        )
        }
        <span 
        class:list={[
            'my-2 text-xs font-bold tracking-tight p-1 rounded',
            {
              'bg-green-200 text-green-900': launch?.success,
              'bg-red-200 text-red-900': !(launch?.success !== null && launch?.success === true)
            }
          ]}
        >
        {(launch?.success !== null && launch?.success === true) ? 'Success ✅' : 'Failure ❌'}
    </span>

        <p class="text-lg">{launch?.details}</p>

    </article>

</Layout>